language: generic
sudo: required
services:
  - docker

install: true

env:
  global:
  - K8S_VERSION=1.19.1
  - KIND_VERSION=0.9.0
  - ISTIO_VERSION=1.7.3
  - REPO=fjudith/bookinfo-load-test
  - TAG=`if [ "$TRAVIS_BRANCH" == "master" ]; then echo "latest"; else echo $TRAVIS_BRANCH ; fi`
  - INSTALL_METALLB=true
  - COMMIT=${TRAVIS_COMMIT::8}

before_script:
  ## Kubectl
  - sudo curl -Lo /usr/local/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/v${K8S_VERSION}/bin/linux/amd64/kubectl
  - sudo chmod +x /usr/local/bin/kubectl
  ## Kind
  - sudo curl -Lo /usr/local/bin/kind https://github.com/kubernetes-sigs/kind/releases/download/v${KIND_VERSION}/kind-linux-amd64
  - sudo chmod +x /usr/local/bin/kind
  - kind create cluster --config=${TRAVIS_BUILD_DIR}/kind_config.yaml
  - docker pull kubernetes/pause
  - kind load docker-image kubernetes/pause
  # - export KUBECONFIG="$(kind get kubeconfig-path)"
  # - cp "$(kind get kubeconfig-path --name="kind")" /tmp/admin.conf
  ## Contour
  - kubectl apply -f https://projectcontour.io/quickstart/contour.yaml
  - kubectl patch daemonsets -n projectcontour envoy -p '{"spec":{"template":{"spec":{"nodeSelector":{"ingress-ready":"true"},"tolerations":[{"key":"node-role.kubernetes.io/master","operator":"Equal","effect":"NoSchedule"}]}}}}'
  ## Istio
  - curl -L https://github.com/istio/istio/releases/download/${ISTIO_VERSION}/istio-${ISTIO_VERSION}-linux-amd64.tar.gz | tar xvzf -
  - chmod +x istio-${ISTIO_VERSION}/bin/istioctl
  - sudo ln -s ${PWD}/istio-${ISTIO_VERSION}/bin/istioctl /usr/local/bin/istioctl
  - istioctl install --set profile=default --force
  - export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].nodePort}')
  ## Bookinfo
  - kubectl label namespace default isio-injection=true
  - kubectl apply -f istio-${ISTIO_VERSION}/samples/bookinfo/platform/kube/bookinfo.yaml --wait
  - kubectl apply -f istio-${ISTIO_VERSION}/samples/bookinfo/networking/bookinfo-gateway.yaml --wait
  - |
    cat << EOF | kubectl apply -f -
    apiVersion: networking.k8s.io/v1beta1
    kind: Ingress
    metadata:
      name: bookinfo
    spec:
      rules:
      - http:
        paths:
        - path: "/"
          backend:
            serviceName: productpage
            servicePort: 9080
        - path: "/productpage"
          backend:
            serviceName: productpage
            servicePort: 9080
    EOF

script:
  ## Build and run bookinfo-load-test
  - kubectl get po,svc,gateway,virtualservice --all-namespaces -o wide
  - ss -anlp
  - docker build -t ${REPO}:${COMMIT} .
  - docker run --rm -t ${REPO}:${COMMIT} -d 5 -h http://127.0.0.1 -u 250 -r 60
after_success:
  - docker tag ${REPO}:${COMMIT} ${REPO}:${TAG}
  - if [ -z "$DOCKER_PASS" ] ; then
      echo "This is a build triggered by an external PR. Skipping docker push.";
      exit 0;
    fi;
  - docker login -u $DOCKER_USER -p $DOCKER_PASS;
  - docker push ${REPO}:${TAG}
